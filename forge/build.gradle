plugins {
    id 'com.github.johnrengelman.shadow'
    id "com.matthewprenger.cursegradle"
    id "com.modrinth.minotaur"
}

apply from: '../gradle-scripts/publish-curseforge.gradle'

loom {
    forge {
        mixinConfig "tisvs.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
        content { includeGroup "thedarkcolour" }
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_version"

    // Valkyrien Skies 2
    modApi("org.valkyrienskies:valkyrienskies-118-forge:$vs2_version") { transitive = false }

    // VS Core
    implementation("org.valkyrienskies.core:api:$vs_core_version")
    implementation("org.valkyrienskies.core:api-game:$vs_core_version")
    implementation("org.valkyrienskies.core:util:$vs_core_version")
    implementation("org.valkyrienskies.core:impl:$vs_core_version")

    // Kotlin for Forge
    implementation "thedarkcolour:kotlinforforge:$forge_kotlin_version"

    // TIS-3D
    modImplementation("curse.maven:tis-3d-238603:3738437")
    modImplementation("curse.maven:markdownmanual-502485:3738124")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

processResources {
    inputs.property "version", project.version

    def props = project.properties
    props['vs2_version'] = project.vs2_version.substring(0, project.vs2_version.indexOf('+'))
    props['forge_version'] = project.forge_version.substring(project.forge_version.indexOf('.') + 1)

    filesMatching("META-INF/mods.toml") {
        expand props
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
